// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  password   String
  name       String
  mobile     String  @unique
  pan        String  @unique
  isVerified Boolean @default(false)
  Order      Order[]
}

enum AdminType {
  ADMIN
  SUPER_ADMIN
}

model Admin {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String
  type     AdminType @default(ADMIN)
}

model ProductType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  price         Float
  type          ProductType @relation(fields: [productTypeId], references: [id])
  productTypeId Int
  Order         Order[]
  Faq           Faq[]
}

model OrderStatus {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  orders Order[]
  Faq    Faq[]
}

model OrderType {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  orders Order[]
  Faq    Faq[]
}

model Order {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  product       Product     @relation(fields: [productId], references: [id])
  productId     Int
  datetime      DateTime    @default(now())
  status        OrderStatus @relation(fields: [orderStatusId], references: [id])
  orderStatusId Int
  type          OrderType   @relation(fields: [orderTypeId], references: [id])
  orderTypeId   Int
  Faq           Faq[]
}

model Faq {
  id            Int          @id @default(autoincrement())
  question      String
  description   String
  order         Order?       @relation(fields: [orderId], references: [id])
  product       Product?     @relation(fields: [productId], references: [id])
  orderStatus   OrderStatus? @relation(fields: [orderStatusId], references: [id])
  orderType     OrderType?   @relation(fields: [orderTypeId], references: [id])
  orderId       Int?
  productId     Int?
  orderStatusId Int?
  orderTypeId   Int?
  parentFaqId   Int?
  parentFaq     Faq?         @relation("LinkedFaqs", fields: [parentFaqId], references: [id])
  childFaq      Faq[]        @relation("LinkedFaqs")
}
